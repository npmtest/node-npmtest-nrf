{"/home/travis/build/npmtest/node-npmtest-nrf/test.js":"/* istanbul instrument in package npmtest_nrf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nrf/lib.npmtest_nrf.js":"/* istanbul instrument in package npmtest_nrf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nrf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nrf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nrf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nrf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nrf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nrf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nrf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nrf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nrf.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nrf.__dirname + '/lib.npmtest_nrf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nrf/node_modules/nrf/index.js":"var q = require('queue-async'),\n    fifo = require('fifolock'),\n    stream = require('stream'),\n    util = require('util'),\n    events = require('events'),\n    SPI = require('pi-spi'),\n    GPIO = require('pi-pins'),\n    _m = require(\"./magicnums\");\n\nvar mutex = fifo();   // HACK: avoid https://github.com/natevw/node-nrf/commit/8d80dabde1026e949f4eb4ea6d25624cbf3c70ec\nfunction forEachWithCB(fn, cb) { cb = mutex.TRANSACTION_WRAPPER(cb, function () {\n    var process = q(1);\n    this.forEach(function (d) { process.defer(fn, d); });\n    process.awaitAll(cb);\n}.bind(this)); }\n\nfunction _extend(obj) {\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var nxt = arguments[i];\n        Object.keys(nxt).forEach(function (k) { obj[k] = nxt[k]; });\n    }\n    return obj;\n}\n\nfunction _nop() {}          // used when a cb is not provided\n\n\nexports.connect = function (spi,ce,irq) {\n    var _spi = spi, _ce = ce, _irq = irq;       // only for printDetails!\n    var nrf = new events.EventEmitter(),\n        spi = SPI.initialize(spi),\n        ce = GPIO.connect(ce),\n        irq = (arguments.length > 2) && GPIO.connect(irq);\n    \n    nrf._T = _extend({}, _m.TIMING, {pd2stby:4500});        // may need local override of pd2stby\n    \n    nrf.blockMicroseconds = function (us) {\n        // NOTE: setImmediate/process.nextTick too slow (especially on Pi) so we just spinloop for µs\n        var start = process.hrtime();\n        while (1) {\n            var diff = process.hrtime(start);\n            if (diff[0] * 1e9 + diff[1] >= us*1e3) break;\n        }\n        if (nrf._debug) console.log(\"blocked for \"+us+\"µs.\");\n    };\n    \n    nrf.execCommand = function (cmd, data, cb) {        // (can omit data, or specify readLen instead)\n        if (typeof data === 'function' || typeof data === 'undefined') {\n            cb = data || _nop;\n            data = 0;\n        }\n        if (nrf._debug) console.log('execCommand', cmd, data);\n        \n        var cmdByte;\n        if (typeof cmd === 'string') {\n            cmdByte = _m.COMMANDS[cmd];\n        } else if (Array.isArray(cmd)) {\n            cmdByte = _m.COMMANDS[cmd[0]] | cmd[1];\n        } else cmdByte = cmd;\n        \n        var writeBuf,\n            readLen = 0;\n        if (Buffer.isBuffer(data)) {\n            writeBuf = Buffer(data.length+1);\n            writeBuf[0] = cmdByte;\n            Array.prototype.reverse.call(data);     // data is LSByte to MSByte, see p.50\n            data.copy(writeBuf,1);\n            Array.prototype.reverse.call(data);     // leave data how caller had.\n        } else if (Array.isArray(data)) {\n            data.reverse();\n            writeBuf = Buffer([cmdByte].concat(data));\n            data.reverse();\n        } else {\n            writeBuf = Buffer([cmdByte]);\n            readLen = data;\n        }\n        \n        spi.transfer(writeBuf, readLen && readLen+1, function (e,d) {\n            if (nrf._debug && readLen) console.log(' - exec read:', d);\n            if (e) return cb(e);\n            else return cb(null, d && Array.prototype.reverse.call(d.slice(1)));\n        });\n    };   \n    \n    function registersForMnemonics(list) {\n        var registersNeeded = Object.create(null);\n        list.forEach(function (mnem) {\n            var _r = _m.REGISTER_MAP[mnem];\n            if (!_r) return console.warn(\"Skipping uknown mnemonic '\"+mnem+\"'!\");\n            if (_r.length === 1) _r.push(0,8);\n            \n            var reg = _r[0],\n                howManyBits = _r[2] || 1,\n                iq = registersNeeded[reg] || (registersNeeded[reg] = {arr:[]});\n            iq.len = (howManyBits / 8 >> 0) || 1;\n            if (howManyBits < 8) iq.arr.push(mnem);\n            else iq.solo = mnem;\n        });\n        return registersNeeded;\n    }\n    \n    function maskForMnemonic(mnem) {\n        var _r = _m.REGISTER_MAP[mnem],\n            howManyBits = _r[2] || 1,\n            rightmostBit = _r[1],\n            mask = 0xFF >> (8 - howManyBits) << rightmostBit;\n        return {mask:mask, rightmostBit:rightmostBit};\n    }\n    \n    nrf.getStates = function (list, cb) {\n        var registersNeeded = registersForMnemonics(list),\n            states = Object.create(null);\n        function processInquiryForRegister(reg, cb) {\n            // TODO: execCommand always reads register 0x07 but we're not optimizing for that\n            // TODO: we could probably also eliminate re-fetch of 0x07 during IRQ processing\n            var iq = registersNeeded[reg];\n            reg = +reg;\n            nrf.execCommand(['R_REGISTER',reg], iq.len, function (e,d) {\n                if (e) return cb(e);\n                iq.arr.forEach(function (mnem) {\n                    var m = maskForMnemonic(mnem);\n                    states[mnem] = (d[0] & m.mask) >> m.rightmostBit;\n                });\n                if (iq.solo) states[iq.solo] = d;\n                cb();\n            });\n        }\n        forEachWithCB.call(Object.keys(registersNeeded), processInquiryForRegister, function (e) {\n            if (nrf._debug) console.log('gotStates', states, e);\n            cb(e,states);\n        });\n    };\n    \n    var _statusReg = _m.REGISTER_MAP['STATUS'][0];\n    nrf.setStates = function (vals, cb) {\n        if (nrf._debug) console.log('setStates', vals);\n        if (!cb) cb = _nop;\n        var registersNeeded = registersForMnemonics(Object.keys(vals));\n        function processInquiryForRegister(reg, cb) {\n            var iq = registersNeeded[reg];\n            reg = +reg;     // was string key, now convert back to number\n            // if a register is \"full\" we can simply overwrite, otherwise we must read+merge\n            // NOTE: high bits in RF_CH/PX_PW_Pn are *reserved*, i.e. technically need merging\n            if (!iq.arr.length || iq.arr[0]==='RF_CH' || iq.arr[0].indexOf('RX_PW_P')===0) {\n                var val = vals[iq.solo || iq.arr[0]],\n                    buf = (Buffer.isBuffer(val)) ? val : [val];\n                nrf.execCommand(['W_REGISTER', reg], buf, cb);\n            } else nrf.execCommand(['R_REGISTER', reg], 1, function (e,d) {\n                if (e) return cb(e);\n                var val = d[0],\n                    settlingNeeded = 0;\n                if (iq.solo) val = vals[iq.solo];  // TODO: refactor so as not to fetch in the first place!\n                iq.arr.forEach(function (mnem) {\n                    var m = maskForMnemonic(mnem);\n                    if (mnem === 'PWR_UP') {\n                        var rising = !(d[0] & m.mask) && vals[mnem];\n                        if (rising) settlingNeeded = Math.max(settlingNeeded, nrf._T.pd2stby);\n                    } else if (mnem === 'PRIM_RX') {    \n                        var changing = !(d[0] & m.mask) !== !vals[mnem];\n                        if (changing) settlingNeeded = Math.max(settlingNeeded, nrf._T.stby2a);\n                    }\n                    val &= ~m.mask;        // clear current value\n                    val |= (vals[mnem] << m.rightmostBit) & m.mask;\n                });\n                if (val !== d[0] || reg === _statusReg) nrf.execCommand(['W_REGISTER', reg], [val], function () {\n                    if (settlingNeeded) nrf.blockMicroseconds(settlingNeeded);  // see p.24\n                    cb.apply(this, arguments);\n                });\n                else cb(null);  // don't bother writing if value hasn't changed (unless status, which clears bits)\n            });\n        }\n        forEachWithCB.call(Object.keys(registersNeeded), processInquiryForRegister, cb);\n    };\n    \n    nrf.setCE = function (state, block) {\n        if (typeof state === 'string') ce.mode(state);\n        else ce.value(state);\n        if (nrf._debug) console.log(\"Set CE \"+state+\".\");\n        if (block) nrf.blockMicroseconds(nrf._T[block]);       // (assume ce changed TX/RX mode)\n    };\n    nrf.pulseCE = function (block) {\n        nrf.setCE(true,'hce');\n        nrf.setCE(false,block);\n    };\n    \n    // ✓ low level interface (execCommand, getStates, setStates, pulseCE, 'interrupt')\n    // ✓ mid level interface (channel, dataRate, power, crcBytes, autoRetransmit{count,delay})\n    // ✓ high level PRX (addrs)\n    // ✓ high level PTX (addr)\n    // - test!\n    // - document\n    \n    \n    nrf.powerUp = function (val, cb) {\n        if (typeof val === 'function' || typeof val === 'undefined') {\n            cb = val || _nop;\n            nrf.getStates(['PWR_UP'], function (e,d) { cb(e, d && !!d.PWR_UP); });\n        } else nrf.setStates({PWR_UP:val}, cb);\n        return this;\n    };\n    \n    nrf.channel = function (val, cb) {\n        if (typeof val === 'function' || typeof val === 'undefined') {\n            cb = val || _nop;\n            nrf.getStates(['RF_CH'], function (e,d) { cb(e, d && d.RF_CH); });\n        } else nrf.setStates({RF_CH:val}, cb);\n        return this;\n    };\n    \n    nrf.dataRate = function (val, cb) {\n        if (typeof val === 'function' || typeof val === 'undefined') {\n            cb = val || _nop;\n            nrf.getStates(['RF_DR_LOW', 'RF_DR_HIGH'], function (e,d) {\n                if (e) return cb(e);\n                else if (d.RF_DR_LOW) cb(null, '250kbps');\n                else if (d.RF_DR_HIGH) cb(null, '2Mbps');\n                else cb(null, '1Mbps');\n            });\n        } else {\n            switch (val) {\n                case '1Mbps':\n                    val = {RF_DR_LOW:false,RF_DR_HIGH:false};\n                    break;\n                case '2Mbps':\n                    val = {RF_DR_LOW:false,RF_DR_HIGH:true};\n                    break;\n                case '250kbps':\n                    val = {RF_DR_LOW:true,RF_DR_HIGH:false};\n                    break;\n                default:\n                    throw Error(\"dataRate must be one of '1Mbps', '2Mbps', or '250kbps'.\");\n            }\n            nrf.setStates(val, cb);\n        }\n        return this;\n    };\n    \n    nrf.transmitPower = function (val, cb) {\n        if (typeof val === 'function' || typeof val === 'undefined') {\n            cb = val || _nop;\n            nrf.getStates(['RF_PWR'], function (e,d) { cb(e, d && _m.TX_POWER[d.RF_PWR]); });\n        } else {\n            val = _m.TX_POWER.indexOf(val);\n            if (val === -1) throw Error(\"Radio power must be 'PA_MIN', 'PA_LOW', 'PA_HIGH' or 'PA_MAX'.\");\n            nrf.setStates({RF_PWR:val}, cb);\n        }\n        return this;\n    };\n    \n    nrf.crcBytes = function (val, cb) {\n        if (typeof val === 'function' || typeof val === 'undefined') {\n            cb = val || _nop;\n            nrf.getStates(['EN_CRC, CRCO'], function (e,d) {\n                if (e) return cb(e);\n                else if (!d.EN_CRC) cb(null, 0);\n                else if (d.CRCO) cb(null, 2);\n                else cb(null, 1);\n            });\n        } else {\n            switch (val) {\n                case 0:\n                    val = {EN_CRC:false,CRCO:0};\n                    break;\n                case 1:\n                    val = {EN_CRC:true,CRCO:0};\n                    break;\n                case 2:\n                    val = {EN_CRC:true,CRCO:1};\n                    break;\n                default:\n                    throw Error(\"crcBytes must be 1, 2, or 0.\");\n            }\n            nrf.setStates(val, cb);\n        }\n        return this;\n    };\n    \n    nrf.addressWidth = function (val, cb) {\n        if (typeof val === 'function' || typeof val === 'undefined') {\n            cb = val || _nop;\n            nrf.getStates(['AW'], function (e,d) { cb(e, d && d.AW+2); });\n        } else nrf.setStates({AW:val-2}, cb);\n        return this;\n    };\n    \n    nrf.autoRetransmit = function (val, cb) {\n        if (typeof val === 'function' || typeof val === 'undefined') {\n            cb = val || _nop;\n            nrf.getStates(['ARD, ARC'], function (e,d) { cb(e, d && {count:d.ARC,delay:250*(1+d.ARD)}); });\n        } else {\n            var states = {};\n            if ('count' in val) states['ARC'] = val.count;\n            if ('delay' in val) states['ARD'] = val.delay/250 - 1;\n            nrf.setStates(states, cb);\n        }\n        return this;\n    };\n    \n    // caller must know pipe and provide its params!\n    nrf.readPayload = function (opts, cb) {\n        if (!cb) cb = _nop;\n        if (opts.width === 'auto') nrf.execCommand('R_RX_PL_WID', 1, function (e,d) {\n            if (e) return finish(e);\n            var width = d[0];\n            if (width > 32) nrf.execCommand('FLUSH_RX', function (e,d) {\n                finish(new Error(\"Invalid dynamic payload size, receive queue flushed.\"));  // per R_RX_PL_WID details, p.51\n            }); else read(width);\n        }); else read(opts.width);\n        \n        function read(width) {\n            nrf.execCommand('R_RX_PAYLOAD', width, finish);\n        }\n        \n        function finish(e,d) {  // see footnote c, p.62\n            if (opts.leaveStatus) cb(e,d);\n            else nrf.setStates({RX_DR:true,TX_DS:false,MAX_RT:false}, function (e2) {    \n                cb(e||e2,d);\n            });\n        }\n    };\n    \n    // caller must set up any prerequisites (i.e. TX addr) and ensure no other send is pending\n    nrf.sendPayload = function (data, opts, cb) {\n        if (!cb) cb = _nop;\n        if (data.length > 32) throw Error(\"Maximum packet size exceeded. Smaller writes, Dash!\");\n        nrf._prevSender = null;     // help PxX setup again if user sends data directly\n        \n        var cmd;\n        if ('asAckTo' in opts) {\n            cmd = ['W_ACK_PAYLOAD',opts.asAckTo];\n        } else if (opts.ack) {\n            cmd = 'W_TX_PAYLOAD';\n        } else {\n            cmd = 'W_TX_PD_NOACK';\n        }\n        nrf.execCommand(cmd, data, function (e) {\n            if (e) return cb(e);\n            if (!opts.ceHigh) nrf.pulseCE('pece2csn');\n            // TODO: if _sendOpts.asAckTo we won't get MAX_RT interrupt — how to prevent a blocked TX FIFO? (see p.33)\n            nrf.once('interrupt', function (d) {\n                if (d.MAX_RT) nrf.execCommand('FLUSH_TX', function (e) {    // see p.56\n                    finish(new Error(\"Packet timeout, transmit queue flushed.\"));\n                });\n                else if (!d.TX_DS) console.warn(\"Unexpected IRQ during transmit phase!\");\n                else finish();\n                \n                function finish(e) {        // clear our interrupts, leaving RX_DR\n                    nrf.setStates({TX_DS:true,MAX_RT:true,RX_DR:false}, function () {\n                        cb(e||null);\n                    });\n                }\n            });\n        });  \n    };\n    \n    nrf.reset = function (states, cb) {\n        if (typeof states === 'function' || typeof states === 'undefined') {\n            cb = states || _nop;\n            states = _m.REGISTER_DEFAULTS;\n        }\n        nrf.setCE('low','stby2a');\n        q(1)\n            .defer(nrf.execCommand, 'FLUSH_TX')\n            .defer(nrf.execCommand, 'FLUSH_RX')\n            .defer(nrf.setStates, states)\n        .await(cb);\n    };\n    \n    var checking = false;\n    nrf._checkStatus = function (irq) {\n        if (nrf._debug) console.log(\"_checkStatus, irq =\", irq, \"checking =\", checking);\n        if (checking && !irq) return;       // avoid simultaneous checks unless latest triggered by real IRQ\n        else checking = true;\n        nrf.getStates(['RX_P_NO','TX_DS','MAX_RT','RX_DR'], function (e,d) {\n            checking = false;\n            if (e) nrf.emit('error', e);\n            else if (d.RX_DR && d.RX_P_NO === 0x07) setTimeout(function () {\n                // HACK: chip seems to assert RX_DR a while before setting RX_P_NO, so poll if necessary\n                // TODO: this may actually just happen until we reset RX_DR (maybe FLUSH_RX or similar unsyncs?)\n                // see also note on top of datasheet p.52 about status register updated *during* IRQ transmission\n                if (nrf._debug) console.warn(\"- weird status, checking again -\");\n                nrf._checkStatus(false);\n            }, 0);\n            else if (irq || d.RX_P_NO !== 0x07 || d.TX_DS || d.MAX_RT) nrf.emit('interrupt', d);\n        });\n    };\n    \n    var irqListener = nrf._checkStatus.bind(nrf,true),\n        irqOn = false;\n    nrf._irqOn = function () {\n        if (irqOn) return;\n        else if (irq) {\n            irq.mode('in');\n            irq.addListener('fall', irqListener);\n        } else {\n            console.warn(\"Recommend use with IRQ pin, fallback handling is suboptimal.\");\n            irqListener = setInterval(function () {       // TODO: clear interval when there are no listeners?\n                if (nrf.listeners('interrupt').length) nrf._checkStatus(false);\n            }, 0);  // (minimum 4ms is a looong time if hoping to quickly stream data!)\n        }\n        irqOn = true;\n    };\n    nrf._irqOff = function () {\n        if (!irqOn) return;\n        else if (irq) irq.removeListener('fall', irqListener);\n        else clearInterval(irqListener);\n        irqOn = false;\n    };\n    \n    var ready = false,\n        txQ = [],\n        txPipes = [],\n        rxPipes = []\n        rxP0 = null;\n    nrf.begin = function (cb) {\n        nrf.setCE('low','stby2a');\n        var clearIRQ = {RX_DR:true, TX_DS:true, MAX_RT:true},\n            features = {EN_DPL:true, EN_ACK_PAY:true, EN_DYN_ACK:true};\n        nrf.reset(_extend({PWR_UP:true, PRIM_RX:false, EN_RXADDR:0x00},clearIRQ,features), function (e) {\n            if (e) return nrf.emit('error', e);\n            nrf._irqOn();           // NOTE: on before any pipes to facilite lower-level sendPayload use\n            ready = true;\n            nrf.emit('ready');\n        });\n        if (cb) nrf.once('ready', cb);\n    };\n    nrf.end = function (cb) {\n        var pipes = txPipes.concat(rxPipes);\n        pipes.forEach(function (pipe) { pipe.close(); });\n        txPipes.length = rxPipes.length = txQ.length = 0;\n        ready = false;\n        nrf._irqOff();\n        nrf.setCE(false,'stby2a');\n        nrf.setStates({PWR_UP:false}, function (e) {\n            if (e) nrf.emit('error', e);\n            else if (cb) cb();\n        });\n    };\n    function slotForAddr(addr) {\n        var slot = Array(6), aw = Math.max(3,Math.min(addr.length, 5));\n        rxPipes.forEach(function (pipe) { slot[pipe._pipe] = pipe._addr; });\n        if (slot[1]) aw = slot[1].length;       // address width already determined\n        if (addr.length === 1) {            // find a place in last four pipes\n            for (var i = 2; i < 6; ++i) if (!slot[i]) return i;\n            throw Error(\"No more final-byte listener addresses available!\");\n        } else if (addr.length === aw) {    // use pipe 1 or 0\n            if (!slot[1]) return 1;\n            else if (!slot[0]) return 0;        // NOTE: using pipe 0 has caveats!\n            else throw Error(\"No more \"+aw+\"-byte listener addresses available!\");\n        } else {\n            throw Error(\"Address 0x\"+addr.toString(16)+\" is of unsuitable width for use.\");\n        }\n    }\n    nrf.openPipe = function (rx_tx, addr, opts) {\n        if (!ready) throw Error(\"Radio .begin() must be finished before a pipe can be opened.\");\n        if (typeof addr === 'number') addr = Buffer(addr.toString(16), 'hex');\n        opts || (opts = {});\n        \n        var pipe;\n        if (rx_tx === 'rx') {\n            var s = slotForAddr(addr);\n            pipe = new PRX(s, addr, opts);\n            rxPipes.push(pipe);\n        } else if (rx_tx === 'tx') {\n            pipe = new PTX(addr, opts);\n            txPipes.push(pipe);\n        } else {\n            throw Error(\"Unknown pipe mode '\"+rx_tx+\"', must be 'rx' or 'tx'.\");\n        }\n        return pipe;\n    };\n    nrf._nudgeTX = function () {\n        if (txQ.active || !txQ.length) return;\n        var d = txQ.shift(); \n        txQ.active = true;\n        d.pipe._tx(d.data, function () {\n            try {\n                d.cb.apply(this, arguments);\n            } finally {\n                delete txQ.active;\n                nrf._nudgeTX();\n            }\n        });\n    };\n    \n    function PxX(pipe, addr, opts) {           // base for PTX/PRX\n        stream.Duplex.call(this,{highWaterMark:64});\n        this.opts = opts;\n        this._pipe = pipe;\n        this._addr = addr;\n        this._size = opts.size;\n        this._wantsRead = false;\n        this._sendOpts = {};\n        \n        var s = {},\n            n = pipe;           // TODO: what if ack'ed TX already in progress and n=0?\n        if (addr.length > 1) s['AW'] = addr.length - 2;\n        if (opts._primRX) {\n            s['PRIM_RX'] = true;\n            if (pipe === 0) rxP0 = this;\n            if (opts.autoAck) nrf._prevSender = null;         // make sure TX doesn't skip setup\n        }\n        if (opts._enableRX) {\n            s['RX_ADDR_P'+n] = addr;            // TODO: AFAICT only opts._primRX should do this\n            s['ERX_P'+n] = true;\n        } else {\n            s['ERX_P'+n] = false;\n        }\n        if (opts.size === 'auto') {\n            s['ENAA_P'+n] = true;   // must be set for DPL (…not sure why)\n            s['DPL_P'+n] = true;\n        } else {\n            s['RX_PW_P'+n] = this._size;\n            s['ENAA_P'+n] = opts.autoAck;\n            s['DPL_P'+n] = false;\n        }\n        nrf.setStates(s, function (e) {\n            if (opts._primRX) nrf.setCE(true,'stby2a');\n            if (e) this.emit('error', e);\n            else this.emit('ready');        // TODO: eliminate need to wait for this (setup on first _rx/_tx?)\n        }.bind(this));\n        \n        var irqHandler = this._rx.bind(this);\n        nrf.addListener('interrupt', irqHandler);\n        this.once('close', function () {\n            nrf.removeListener('interrupt', irqHandler);\n        });\n    }\n    util.inherits(PxX, stream.Duplex);\n    PxX.prototype._write = function (buff, _enc, cb) {\n        txQ.push({pipe:this,data:buff,cb:cb});\n        nrf._nudgeTX();\n    };\n    PxX.prototype._tx = function (data, cb) {      // see p.75\n        var s = {};\n        if (this._sendOpts.asAckTo) {\n            // no config is needed\n        } else if (nrf._prevSender === this) {\n            if (rxPipes.length) {\n                nrf.setCE('low');       // this or PWR_UP:0 are the only ways out of RX mode acc to p.22\n                s['PRIM_RX'] = false;\n            }\n        } else {\n            s['TX_ADDR'] = this._addr;\n            if (rxPipes.length) {\n                nrf.setCE('low');\n                s['PRIM_RX'] = false;\n            }\n            if (this._sendOpts.ack) {\n                if (rxP0) rxP0._pipe = -1;          // HACK: avoid the pipe-0 PRX from reading our ack payload\n                s['RX_ADDR_P0'] = this._addr;\n                if ('retryCount' in this.opts) s['ARC'] = this.opts.retryCount;\n                if ('retryDelay' in this.opts) s['ARD'] = this.opts.retryDelay/250 - 1;\n                // TODO: shouldn't this be overrideable regardless of _sendOpts.ack??\n                if ('txPower' in this.opts) s['RF_PWR'] = _m.TX_POWER.indexOf(this.opts.txPower);\n            }\n        }\n        nrf.setStates(s, function (e) {     // (± fine to call with no keys)\n            if (e) return cb(e);\n            var sendOpts = _extend({},this._sendOpts);\n            //if (rxPipes.length) sendOpts.ceHigh = true;        // PRX will already have CE high\n            nrf.sendPayload(data, sendOpts, function (e) {\n                if (e) return cb(e);\n                var s = {};                 // NOTE: if another TX is waiting, switching to RX is a waste…\n                if (rxPipes.length && !this._sendOpts.asAckTo) {\n                    nrf.setCE('high');\n                    s['PRIM_RX'] = true;\n                }\n                if (this._sendOpts.ack && rxP0) {\n                    s['RX_ADDR_P0'] = rxP0._addr;\n                    rxP0._pipe = 0;\n                }\n                nrf.setStates(s, cb);\n            }.bind(this));\n            if (!rxPipes.length) nrf._prevSender = this;    // we might avoid setting state next time\n        }.bind(this));\n    };\n    PxX.prototype._rx = function (d) {\n        if (d.RX_P_NO !== this._pipe) return;\n        if (!this._wantsRead) return;           // NOTE: this could starve other RX pipes!\n        \n        nrf.readPayload({width:this._size}, function (e,d) {\n            if (e) this.emit('error', e);\n            else this._wantsRead = this.push(d);\n            nrf._checkStatus(false);         // see footnote c, p.63\n        }.bind(this));\n    };\n    PxX.prototype._read = function () {\n        this._wantsRead = true;\n        nrf._checkStatus(false);\n    };\n    PxX.prototype.close = function () {\n        if (rxP0 === this) rxP0 = null;\n        // TODO: also update CE and RX_EN registers accordingly\n        this.push(null);\n        this.emit('close');\n    };\n    \n    function PTX(addr,opts) {\n        opts = _extend({size:'auto',autoAck:true,ackPayloads:false}, opts);\n        opts._enableRX = (opts.autoAck || opts.ackPayloads);\n        PxX.call(this, 0, addr, opts);\n        _extend(this._sendOpts, {ack:opts._enableRX});\n    }\n    util.inherits(PTX, PxX);\n    \n    function PRX(pipe, addr, opts) {\n        opts = _extend({size:'auto',autoAck:true}, opts);\n        opts._primRX = opts._enableRX = true;\n        PxX.call(this, pipe, addr, opts);\n        _extend(this._sendOpts, {ack:false, asAckTo:pipe});\n    }\n    util.inherits(PRX, PxX);\n    \n    \n    nrf.printStatus = function () {         // for debugging\n        nrf.getStates(['RX_DR','TX_DS','MAX_RT','RX_P_NO','TX_FULL'], function (e,d) {\n            if (e) throw e;\n            else console.log(irq.value() ? 'no-irq' : '-IRQ-', d);\n        });\n    };\n    \n    nrf.printDetails = function (cb) {        // for debugging, mimic e.g. https://github.com/stanleyseow/RF24/blob/master/librf24-rpi/librf24/RF24.cpp#L318\n        if (!cb) cb = _nop;\n        console.log(\"SPI device:\\t\",_spi);\n        //console.log(\"SPI speed:\\t\",'?');\n        console.log(\"CE GPIO:\\t\",_ce);\n        console.log(\"IRQ GPIO:\\t\",_irq);\n        nrf.getStates(['STATUS','RX_DR','TX_DS','MAX_RT','RX_P_NO','TX_FULL'], function (e,d) {\n            if (e) throw e;\n            console.log(\"STATUS:\\t\\t\",_h(d.STATUS[0]),'RX_DR='+d.RX_DR,'TX_DS='+d.TX_DS,'MAX_RT='+d.MAX_RT,'RX_P_NO='+d.RX_P_NO,'TX_FULL='+d.TX_FULL);\n            nrf.getStates(['RX_ADDR_P0','RX_ADDR_P1','RX_ADDR_P2','RX_ADDR_P3','RX_ADDR_P4','RX_ADDR_P5','TX_ADDR'], function (e,d) {\n                \n                console.log(\"RX_ADDR_P0–1:\\t\",_h(d.RX_ADDR_P0),_h(d.RX_ADDR_P1));\n                console.log(\"RX_ADDR_P2–5:\\t\",_h(d.RX_ADDR_P2),_h(d.RX_ADDR_P3),_h(d.RX_ADDR_P4),_h(d.RX_ADDR_P5));\n                console.log(\"TX_ADDR:\\t\",_h(d.TX_ADDR));\n                nrf.getStates(['RX_PW_P0','RX_PW_P1','RX_PW_P2','RX_PW_P3','RX_PW_P4','RX_PW_P5'], function (e,d) {\n                    console.log(\"RX_PW_P0–5:\\t\",\n                        _h(d.RX_PW_P0),_h(d.RX_PW_P1),_h(d.RX_PW_P2),\n                        _h(d.RX_PW_P3),_h(d.RX_PW_P4),_h(d.RX_PW_P5)\n                    );\n                    nrf.getStates(['EN_AA','EN_RXADDR','RF_CH','RF_SETUP','CONFIG','DYNPD','FEATURE'], function (e,d) {\n                        console.log(\"EN_AA:\\t\\t\",_h(d.EN_AA));\n                        console.log(\"EN_RXADDR:\\t\",_h(d.EN_RXADDR));\n                        console.log(\"RF_CH:\\t\\t\",_h(d.RF_CH));\n                        console.log(\"RF_SETUP:\\t\",_h(d.RF_SETUP));\n                        console.log(\"CONFIG:\\t\\t\",_h(d.CONFIG));\n                        console.log(\"DYNPD/FEATURE:\\t\",_h(d.DYNPD),_h(d.FEATURE));\n                        nrf.getStates(['RF_DR_LOW','RF_DR_HIGH','EN_CRC','CRCO','RF_PWR'], function (e,d) {\n                            var isPlus = false,\n                                pwrs = ('compat') ? _m.TX_POWER : [\"-18dBm\",\"-12dBm\",\"-6dBm\",\"0dBm\"];\n                            if (d.RF_DR_LOW) {      // if set, we already know and don't need to check by toggling\n                                isPlus = true;\n                                logFinalDetails();\n                            } else nrf.setStates({RF_DR_LOW:true}, function () {\n                                nrf.getStates(['RF_DR_LOW'], function (e,d2) {\n                                    // (non-plus chips hold this bit zero even after settting)\n                                    if (d2.RF_DR_LOW) isPlus = true;\n                                    // …then set back to original (false) value again\n                                    nrf.setStates({RF_DR_LOW:false}, function () {\n                                        logFinalDetails();\n                                    });\n                                });\n                            });\n                            function logFinalDetails() {\n                                console.log(\"Data Rate:\\t\", (d.RF_DR_LOW) ? \"250kbps\" : ((d.RF_DR_HIGH) ? \"2Mbps\" : \"1Mbps\"));\n                                console.log(\"Model:\\t\\t\", (isPlus) ? \"nRF24L01+\" : \"nRF24L01\");\n                                console.log(\"CRC Length:\\t\", (d.EN_CRC) ? ((d.CRCO) ? \"16 bits\" : \"8 bits\") : \"Disabled\");\n                                console.log(\"PA Power:\\t\", pwrs[d.RF_PWR]);\n                                cb();\n                            }\n                        });\n                    });\n                });\n            });\n        });\n        function _h(n) { return (Buffer.isBuffer(n)) ? '0x'+n.toString('hex') : '0x'+n.toString(16); }  \n    };\n    \n    nrf.on('interrupt', function (d) { if (nrf._debug) console.log(\"IRQ.\", d); });\n    \n    return nrf;\n}","/home/travis/build/npmtest/node-npmtest-nrf/node_modules/nrf/magicnums.js":"function _b(v) { return parseInt(v.replace(' ',''),2); }\n\nexports.COMMANDS = {\n    R_REGISTER:     _b('0000 0000'),\n    W_REGISTER:     _b('0010 0000'),\n    R_RX_PAYLOAD:   _b('0110 0001'),\n    W_TX_PAYLOAD:   _b('1010 0000'),\n    FLUSH_TX:       _b('1110 0001'),\n    FLUSH_RX:       _b('1110 0010'),\n    REUSE_TX_PL:    _b('1110 0011'),\n    R_RX_PL_WID:    _b('0110 0000'),\n    W_ACK_PAYLOAD:  _b('1010 1000'),\n    W_TX_PD_NOACK:  _b('1011 0000'),\n    NOP:            _b('1111 1111')\n};\n\nexports.REGISTER_MAP = {\n    // mnemonic    addr,bit[,width]\n/* CONFIG */\n    CONFIG:         [0x00],\n    MASK_RX_DR:     [0x00,6],\n    MASK_TX_DS:     [0x00,5],\n    MASK_MAX_RT:    [0x00,4],\n    EN_CRC:         [0x00,3],\n    CRCO:           [0x00,2],\n    PWR_UP:         [0x00,1],\n    PRIM_RX:        [0x00,0],\n/* EN_AA */\n    EN_AA:          [0x01],\n    ENAA_P5:        [0x01,5],\n    ENAA_P4:        [0x01,4],\n    ENAA_P3:        [0x01,3],\n    ENAA_P2:        [0x01,2],\n    ENAA_P1:        [0x01,1],\n    ENAA_P0:        [0x01,0],\n/* EN_RXADDR */\n    EN_RXADDR:      [0x02],\n    ERX_P5:         [0x02,5],\n    ERX_P4:         [0x02,4],\n    ERX_P3:         [0x02,3],\n    ERX_P2:         [0x02,2],\n    ERX_P1:         [0x02,1],\n    ERX_P0:         [0x02,0],\n/* SETUP_AW */\n    SETUP_AW:       [0x03],\n    AW:             [0x03,0,2],\n/* SETUP_RETR */\n    SETUP_RETR:     [0x04],\n    ARD:            [0x04,4,4],\n    ARC:            [0x04,0,4],\n/* RF_CH */\n    RF_CH:          [0x05,0,7],\n/* RF_SETUP */\n    RF_SETUP:       [0x06],\n    CONT_WAVE:      [0x06,7],\n    RF_DR_LOW:      [0x06,5],\n    PLL_LOCK:       [0x06,4],\n    RF_DR_HIGH:     [0x06,3],\n    RF_PWR:         [0x06,1,2],\n    LNA_HCURR:      [0x06,0],       // NOTE: this is obsolete on the nRF24L01+ model\n/* STATUS */\n    STATUS:         [0x07],\n    RX_DR:          [0x07,6],\n    TX_DS:          [0x07,5],\n    MAX_RT:         [0x07,4],\n    RX_P_NO:        [0x07,1,3],\n    TX_FULL:        [0x07,0],\n/* OBSERVE_TX */\n    OBSERVE_TX:     [0x08],\n    PLOS_CNT:       [0x08,4,4],\n    ARC_CNT:        [0x08,0,4],\n/* RPD */\n    RPD:            [0x09,0],\n/* ADDR */\n    RX_ADDR_P0:     [0x0A,0,40],\n    RX_ADDR_P1:     [0x0B,0,40],\n    RX_ADDR_P2:     [0x0C,0,8],\n    RX_ADDR_P3:     [0x0D,0,8],\n    RX_ADDR_P4:     [0x0E,0,8],\n    RX_ADDR_P5:     [0x0F,0,8],\n    TX_ADDR:        [0x10,0,40],\n/* RX_PW_Pn */\n    RX_PW_P0:       [0x11,0,6],\n    RX_PW_P1:       [0x12,0,6],\n    RX_PW_P2:       [0x13,0,6],\n    RX_PW_P3:       [0x14,0,6],\n    RX_PW_P4:       [0x15,0,6],\n    RX_PW_P5:       [0x16,0,6],\n/* FIFO_STATUS */\n    FIFO_STATUS:    [0x17],\n    TX_REUSE:       [0x17,6],\n    TX_FULL:        [0x17,5],\n    TX_EMPTY:       [0x17,4],\n    RX_FULL:        [0x17,1],\n    RX_EMPTY:       [0x17,0],\n/* DYNPD */\n    DYNPD:          [0x1C],\n    DPL_P5:         [0x1C,5],\n    DPL_P4:         [0x1C,4],\n    DPL_P3:         [0x1C,3],\n    DPL_P2:         [0x1C,2],\n    DPL_P1:         [0x1C,1],\n    DPL_P0:         [0x1C,0],\n/* FEATURE */\n    FEATURE:        [0x1D],\n    EN_DPL:         [0x1D,2],\n    EN_ACK_PAY:     [0x1D,1],\n    EN_DYN_ACK:     [0x1D,0]\n};\n\nexports.REGISTER_DEFAULTS = {\n    CONFIG:     _b('0000 1000'),\n    EN_AA:      _b('0011 1111'),\n    EN_RXADDR:  _b('0000 0011'),\n    SETUP_AW:   _b('0000 0011'),\n    SETUP_RETR: _b('0000 0011'),\n    RF_CH:      _b('0000 0010'),\n    RF_SETUP:   _b('0000 1111'),\n    STATUS:     _b('0111 1110'),\n    RX_ADDR_P0: Buffer(\"E7E7E7E7E7\", 'hex'),\n    RX_ADDR_P1: Buffer(\"C2C2C2C2C2\", 'hex'),\n    RX_ADDR_P2: 0xC3,\n    RX_ADDR_P3: 0xC4,\n    RX_ADDR_P4: 0xC5,\n    RX_ADDR_P5: 0xC6,\n    TX_ADDR:    Buffer(\"E7E7E7E7E7\", 'hex'),\n    DYNPD:      _b('0000 0000'),\n    FEATURE:    _b('0000 0000'),\n};\n\nexports.TIMING = {\n    pd2stby: 150,      // NOTE: varies dep. on crystal configuration, see p.24/p.19\n    stby2a: 130,\n    hce: 10,\n    pece2csn: 4\n};\n\nexports.TX_POWER = ['PA_MIN', 'PA_LOW', 'PA_HIGH', 'PA_MAX'];\n","/home/travis/build/npmtest/node-npmtest-nrf/node_modules/nrf/test2.js":"// see https://gist.github.com/natevw/5789019 for pins\n\nvar pipes = [0xF1F0F0F0E1, 0xF1F0F0F0D2];\nvar radios = [\n    {spiDev:\"/dev/spidev0.0\", cePin:24, irqPin:25},\n    {spiDev:\"/dev/spidev0.1\", cePin:23}\n];\n\n\nvar NRF24 = require(\"./index\"),\n    queue = require('queue-async');\n\nvar q = queue();\nradios.forEach(function (radio) {\n    radio._interface = (radio.irqPin) ?\n        NRF24.connect(radio.spiDev, radio.cePin, radio.irqPin) :\n        NRF24.connect(radio.spiDev, radio.cePin);\n    q.defer(setupRadio, radio._interface);\n});\nfunction setupRadio(radio, cb) {\n    radio.channel(0x4c).dataRate('1Mbps').crcBytes(2);\n    radio.transmitPower('PA_MAX').autoRetransmit({count:15, delay:4000});\n    radio.begin(function (e) { cb(e, radio); });\n}\nq.awaitAll(function (e,d) {\n    if (e) throw e;\n    \n    d[0]._debug = true;\n    \n    var tx = d[1].openPipe('tx', pipes[0]),\n        rx = d[0].openPipe('rx', pipes[0]),\n        rx2 = d[0].openPipe('rx', pipes[1]);\n    \n    tx.on('ready', function () {\n        tx.write(\"NARF!\");\n        tx.write(\"Hello?\");\n        tx.write(\"blah blah blah\");\n        tx.write(\"the number 4\");\n        setInterval(tx.write.bind(tx, \"beep\"), 2e3);\n        //setInterval(tx.write.bind(tx, \"boop\"), 2e3);\n    });\n    rx.on('data', function (d) {\n        console.log(\"Got data:\", d.toString());\n    });\n    \n    // RX - no ack\n    // TX - no ack\n    \n    // RX - ack payloads\n    // TX - ack payloads\n});"}